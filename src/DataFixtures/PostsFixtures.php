<?php

namespace App\DataFixtures;

use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;//to make sure tags are loaded before posts
use Doctrine\Persistence\ObjectManager;
use Doctrine\Common\DataFixtures\ReferenceRepository;
use App\Entity\Post;
use App\Entity\Tag;
use App\Entity\Category;

class PostsFixtures extends Fixture implements DependentFixtureInterface
{
    public function load(ObjectManager $manager): void
    {    
        $post = new Post();
        $post-> setTitle('Configuration de lâ€™authentification');
        $post-> setContent('La gestion de lâ€™authentification dans Symfony 7 est simplifiÃ©e grÃ¢ce Ã  une sÃ©rie de commandes pratiques fournies par Symfony MakerBundle. Pour dÃ©buter, la commande make:user crÃ©e une nouvelle classe "User" qui reprÃ©sente les utilisateurs dans votre systÃ¨me. Cette classe inclut les propriÃ©tÃ©s et mÃ©thodes essentielles pour la gestion des utilisateurs. Une fois votre entitÃ© utilisateur en place, utilisez make:auth pour gÃ©nÃ©rer rapidement un systÃ¨me dâ€™authentification. Cette commande vous aide Ã  crÃ©er un formulaire de connexion et gÃ¨re le processus dâ€™authentification. Enfin, make:registration-form est utilisÃ©e pour gÃ©nÃ©rer un formulaire dâ€™inscription pour les nouveaux utilisateurs. Cette commande crÃ©e non seulement le formulaire, mais aussi le contrÃ´leur et le template associÃ© pour lâ€™enregistrement des utilisateurs. Ces outils ensemble fournissent un moyen efficace et sÃ©curisÃ© de gÃ©rer lâ€™authentification et lâ€™enregistrement des utilisateurs dans vos applications Symfony, vous permettant de construire des systÃ¨mes robustes tout en Ã©conomisant du temps de dÃ©veloppement.');
        $post->addTag($this->getReference('tag-symfony', Tag::class));
        $post->addTag($this->getReference('tag-uel316', Tag::class));
        $post->setCategory($this->getReference('cat-cvtic', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);  
        

      
        $manager->persist($post);

        $post = new Post();
        $post-> setTitle('CRUD sur une entitÃ©');
        $post-> setContent('La mise en place dâ€™un systÃ¨me CRUD dans Symfony 7 pour une entitÃ© comme Post est essentielle pour permettre la crÃ©ation, la lecture, la mise Ã  jour et la suppression de donnÃ©es de maniÃ¨re efficace. AprÃ¨s avoir crÃ©Ã© lâ€™entitÃ© Post avec ses attributs nÃ©cessaires, vous pouvez gÃ©nÃ©rer automatiquement les opÃ©rations CRUD en utilisant la commande php bin/console make:crud. Cette commande vous demande de spÃ©cifier lâ€™entitÃ© pour laquelle le CRUD doit Ãªtre gÃ©nÃ©rÃ©, ici Post. Symfony se charge alors de crÃ©er un contrÃ´leur PostController et des templates Twig pour chaque opÃ©ration CRUD. Le contrÃ´leur inclura des mÃ©thodes pour ajouter un nouveau post (new), lister tous les posts (index), afficher un post spÃ©cifique (show), Ã©diter un post existant (edit) et supprimer un post (delete). Les templates Twig correspondants fournissent une interface utilisateur pour chaque action. Avec ces fichiers gÃ©nÃ©rÃ©s, vous avez une base solide pour personnaliser et Ã©tendre les fonctionnalitÃ©s selon les besoins spÃ©cifiques de votre application. Lâ€™intÃ©gration du systÃ¨me CRUD avec lâ€™entitÃ© Post vous permet de gÃ©rer facilement les donnÃ©es de posts, rendant votre application dynamique et interactive.');
        $post->addTag($this->getReference('tag-symfony', Tag::class));
        $post->addTag($this->getReference('tag-uel316',Tag::class));
        $post->setCategory($this->getReference('cat-cvtic', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);        
        
        
        $manager->persist($post);

        $post = new Post();
        $post-> setTitle('MongoDB en deux mots');
        $post-> setContent('MongoDB (de l\'anglais humongous qui peut Ãªtre traduit par Â« Ã©norme Â») est un SGBD orientÃ© documents, rÃ©partissable sur un nombre quelconque d\'ordinateurs. Il est Ã©crit en C++ et permet de manipuler des objets structurÃ©s au format JSON, sans schÃ©ma prÃ©dÃ©terminÃ©. En d\'autres termes, des donnÃ©es peuvent Ãªtre ajoutÃ©es Ã  tout moment "Ã  la volÃ©e", sans reconfiguration de la base. Les donnÃ©es prennent la forme de documents enregistrÃ©s eux-mÃªmes dans des collections, une collection contenant un nombre quelconque de documents. On peut considÃ©rer que les collections sont comparables aux tables SQL, et les documents aux enregistrements. Mais contrairement aux SGBD classiques, les champs sont libres et peuvent Ãªtre diffÃ©rents d\'un enregistrement Ã  l\'autre au sein d\'une mÃªme collection. Le seul champ commun et obligatoire est le champ de clÃ© principale ("_id").');
        $post->addTag($this->getReference('tag-mongodb',Tag::class));
        $post->addTag($this->getReference('tag-uel315',Tag::class));
        $post->setCategory($this->getReference('cat-cvtic', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);        
        
        $manager->persist($post);


        $post = new Post();
        $post-> setTitle('TypeScript expliquÃ© Ã  ma mamie ');
        $post-> setContent('Si JavaScript est un PC Windows, alors TypeScript est un MacBook Pro ðŸ¤­ #jugementdevaleur
        C\'est un langage de programmation crÃ©Ã© pour rendre JavaScript plus facile et plus sÃ»r Ã  utiliser, surtout quand les projets deviennent grands ou compliquÃ©s
        TypeScript, c\'est du JavaScript, mais avec des rÃ¨gles en plus pour Ã©viter les erreurs');
        $post->addTag($this->getReference('tag-nestjs',Tag::class));
        $post->addTag($this->getReference('tag-uel314',Tag::class));
        $post->setCategory($this->getReference('cat-cvtic', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);        
        
      
        $manager->persist($post);

        $post = new Post();
        $post-> setTitle('NestJs');
        $post-> setContent('NestJS est un framework progressif pour la construction d\'applications serveur en Node.js. Utilisant TypeScript comme langage principal, mais compatible aussi avec JavaScript pur, NestJS apporte une efficacitÃ© et une fiabilitÃ© accrues au dÃ©veloppement backend. InspirÃ© par Angular, il adopte une architecture logicielle robuste et est bien adaptÃ© pour construire des applications Ã  grande Ã©chelle.
        Pourquoi NestJS ?
        NestJS se distingue par sa facilitÃ© d\'usage et son architecture fortement inspirÃ©e par Angular, ce qui le rend attrayant pour ceux familiers avec ce dernier. Il intÃ¨gre des principes de programmation orientÃ©e objet (POO), de programmation fonctionnelle et de programmation fonctionnelle rÃ©active. En outre, sa compatibilitÃ© avec TypeScript offre une expÃ©rience de dÃ©veloppement plus sÃ»re et plus efficace, grÃ¢ce Ã  une meilleure complÃ©tion de code et une dÃ©tection d\'erreur amÃ©liorÃ©e.');
        $post->addTag($this->getReference('tag-nestjs',Tag::class));
        $post->addTag($this->getReference('tag-uel314',Tag::class));
        $post->setCategory($this->getReference('cat-cvtic', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true); 

        $manager->persist($post);

        $post = new Post();
        $post-> setTitle('Installation dâ€™un bundle');
        $post-> setContent('Un bundle dans Symfony est un composant ou un module qui peut Ãªtre intÃ©grÃ© dans un projet pour Ã©tendre ses fonctionnalitÃ©s ou ajouter de nouvelles fonctionnalitÃ©s. ConsidÃ©rez-le comme un plugin ou une extension qui suit des conventions spÃ©cifiques et qui est facilement configurable et rÃ©utilisable dans diffÃ©rents projets Symfony. Par exemple, pour ajouter une interface dâ€™administration Ã  votre application Symfony 7, vous pourriez choisir dâ€™installer un bundle tel quâ€™EasyAdmin. EasyAdmin est largement utilisÃ© pour sa simplicitÃ© et son efficacitÃ© dans la crÃ©ation dâ€™interfaces dâ€™administration. Pour lâ€™installer, vous devez exÃ©cuter la commande composer require easycorp/easyadmin-bundle dans votre terminal. Cette commande utilise le gestionnaire de dÃ©pendances Composer pour tÃ©lÃ©charger et installer le bundle dans votre projet. AprÃ¨s lâ€™installation, le bundle est gÃ©nÃ©ralement activÃ© automatiquement ou vous pouvez lâ€™ajouter manuellement dans le fichier config/bundles.php. Ensuite, il est nÃ©cessaire de configurer le bundle selon vos besoins, en ajustant les fichiers de configuration pour dÃ©finir comment vous souhaitez que lâ€™interface dâ€™administration fonctionne et apparaisse dans votre application.');
        $post->addTag($this->getReference('tag-symfony',Tag::class));
        $post->addTag($this->getReference('tag-uel316',Tag::class));
        $post->setCategory($this->getReference('cat-cvtic', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);        
        
        $manager->persist($post);

        $post = new Post();
        $post-> setTitle('About trying');
        $post-> setContent('"Ever tried. Ever failed. No matter. Try again. Fail again. Fail better."â€“ from Worstward Ho by Samuel Beckett.');
        $post->addTag($this->getReference('tag-motivation',Tag::class));
        $post->setCategory($this->getReference('cat-quotes', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);        
        
        $manager->persist($post);

        $post = new Post();
        $post-> setTitle('Another quote about trying');
        $post-> setContent('"I have not failed. I\'ve just found 10,000 ways that won\'t work. "â€• Thomas A. Edison ');
        $post->addTag($this->getReference('tag-motivation',Tag::class));
        $post->setCategory($this->getReference('cat-quotes', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);

        $manager->persist($post);  
        
        $post = new Post();
        $post-> setTitle('Success');
        $post-> setContent('"Success is not final, failure is not fatal: it is the courage to continue that counts."â€• Winston S. Churchill');
        $post->addTag($this->getReference('tag-motivation',Tag::class));
        $post->setCategory($this->getReference('cat-quotes', Category::class));
        $post->setCreatedAt(new \DateTimeImmutable());
        $post->setUpdatedAt(new \DateTimeImmutable());
        $post->setIsactive(true);  

        $manager->persist($post);

        $manager->flush();
    }
    public function getDependencies() : array
    {
        return [
            TagFixtures::class,
            CategoryFixtures::class
        ];
    }

}